{"version":3,"file":"lnodetype.js","sourceRoot":"","sources":["../../../template/templates/lnodetype.ts"],"names":[],"mappings":"AAGA,OAAO,EACL,gBAAgB,EAChB,UAAU,EACV,gBAAgB,GACjB,MAAM,iBAAiB,CAAC;AAEzB,KAAK,UAAU,sBAAsB,CAAC,IAAY;IAChD,MAAM,YAAY,GAAG,gBAAgB,CAAC,MAAM,UAAU,EAAE,IAAI,CAAC,CAAC;IAE9D,OAAO,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CACvC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,CAAC,CACpE,CAAC;AACJ,CAAC;AAED,KAAK,UAAU,wBAAwB,CACrC,SAAkB,EAClB,OAAe;IAEf,MAAM,MAAM,GAAkB,EAAE,CAAC;IAEjC,MAAM,YAAY,GAAG,MAAM,CACzB,MAAM,sBAAsB,CAAC,OAAO,CAAC,CACtC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAE,CAAC,CAAC;IAEtC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QACjC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,YAAY,WAAW,IAAI,CAAC;YACvD,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,sCAAsC,OAAO,KAAK,OAAO,SAAS,WAAW,EAAE;gBACtF,OAAO,EAAE,GAAG,OAAO,MAAM,WAAW,EAAE;aACvC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,OAAgB;IAEhB,MAAM,MAAM,GAAkB,EAAE,CAAC;IAEjC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAChD,IAAI,CAAC,OAAO;QACV,OAAO;YACL;gBACE,KAAK,EAAE,yCAAyC,OAAO,KAAK,OAAO,CAAC,OAAO,EAAE;gBAC7E,OAAO,EAAE,GAAG,OAAO,EAAE;aACtB;SACF,CAAC;IAEJ,MAAM,eAAe,GAAG,MAAM,wBAAwB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACzE,MAAM,cAAc,GAAG,MAAM,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAEvD,OAAO,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,cAAc,CAAC,CAAC;AACxD,CAAC","sourcesContent":["/* eslint-disable no-promise-executor-return */\nimport { IssueDetail } from '../../foundation/utils.js';\n\nimport {\n  getAdjacentClass,\n  iec6185074,\n  validateChildren,\n} from './foundation.js';\n\nasync function getMandatoryDataObject(base: string): Promise<Element[]> {\n  const lnodeclasses = getAdjacentClass(await iec6185074, base);\n\n  return lnodeclasses.flatMap(lnodeclass =>\n    Array.from(lnodeclass.querySelectorAll('DataObject[presCond=\"M\"]'))\n  );\n}\n\nasync function missingMandatoryChildren(\n  lnodetype: Element,\n  lnClass: string\n): Promise<IssueDetail[]> {\n  const errors: IssueDetail[] = [];\n\n  const mandatorydos = await (\n    await getMandatoryDataObject(lnClass)\n  ).map(DO => DO.getAttribute('name')!);\n\n  mandatorydos.forEach(mandatorydo => {\n    if (!lnodetype.querySelector(`DO[name=\"${mandatorydo}\"]`))\n      errors.push({\n        title: `validator.templates.mandatoryChild ${lnClass}, ${lnClass}, DO, ${mandatorydo}`,\n        message: `${lnClass} > ${mandatorydo}`,\n      });\n  });\n\n  return errors;\n}\n\nexport async function lNodeTypeValidator(\n  element: Element\n): Promise<IssueDetail[]> {\n  const errors: IssueDetail[] = [];\n\n  const lnClass = element.getAttribute('lnClass');\n  if (!lnClass)\n    return [\n      {\n        title: `validator.templates.missingAttribute, ${lnClass}, ${element.tagName}`,\n        message: `${lnClass}`,\n      },\n    ];\n\n  const missingChildren = await missingMandatoryChildren(element, lnClass);\n  const issuesChildren = await validateChildren(element);\n\n  return errors.concat(missingChildren, issuesChildren);\n}\n"]}