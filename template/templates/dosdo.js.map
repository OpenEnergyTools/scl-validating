{"version":3,"file":"dosdo.js","sourceRoot":"","sources":["../../../template/templates/dosdo.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAE9D,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,OAAgB;IAChD,IAAI,aAAa,CAAC,OAAO,CAAC;QACxB,OAAO;YACL;gBACE,KAAK,EAAE,+CAA+C,OAAO,CAAC,OAAO,EAAE;gBACvE,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE;aAC9B;SACF,CAAC;IAEJ,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;IACpC,IAAI,KAAK,KAAK,IAAI;QAChB,OAAO;YACL;gBACE,KAAK,EAAE,6CAA6C,OAAO,CAAC,YAAY,CACtE,MAAM,CACP,EAAE;gBACH,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE;aAC9B;SACF,CAAC;IAEJ,OAAO,EAAE,CAAC;AACZ,CAAC","sourcesContent":["/* eslint-disable no-promise-executor-return */\nimport { IssueDetail } from '../../foundation/utils.js';\nimport { getTypeChild, isTypeMissing } from './foundation.js';\n\nexport async function dOValidator(element: Element): Promise<IssueDetail[]> {\n  if (isTypeMissing(element))\n    return [\n      {\n        title: `validator.templates.missingAttribute, type, ${element.tagName}`,\n        message: `${element.tagName}`,\n      },\n    ];\n\n  const child = getTypeChild(element);\n  if (child === null)\n    return [\n      {\n        title: `validator.templates.missingReference, DO, ${element.getAttribute(\n          'name'\n        )}`,\n        message: `${element.tagName}`,\n      },\n    ];\n\n  return [];\n}\n"]}