{"version":3,"file":"validateSchema.js","sources":["../../../schema/validateSchema.ts"],"sourcesContent":["import {\n  IssueDetail,\n  ValidationResult,\n  Validator,\n  WorkerMessage,\n  isLoadSchemaResult,\n  isValidationError,\n  isValidationResult,\n} from '../foundation/utils.js';\nimport { getSchema } from './schemas.js';\n\nconst validators: Partial<Record<string, Validator>> = {};\n\nexport async function validateSchema(\n  doc: XMLDocument,\n  docName: string\n): Promise<IssueDetail[]> {\n  const issues: IssueDetail[] = [];\n\n  const fileName = docName;\n  let version = '2007';\n  let revision = 'B';\n  let release = '1';\n\n  if (doc.documentElement)\n    [version, revision, release] = [\n      doc.documentElement.getAttribute('version') ?? '',\n      doc.documentElement.getAttribute('revision') ?? '',\n      doc.documentElement.getAttribute('release') ?? '',\n    ];\n\n  async function getValidator(\n    xsd: string,\n    xsdName: string\n  ): Promise<Validator> {\n    if (!window.Worker) throw new Error('Invalid schema');\n    if (validators[xsdName]) return validators[xsdName]!;\n\n    const worker: Worker = new Worker(new URL('./worker.js', import.meta.url));\n\n    async function validate(\n      xml: string,\n      xmlName: string,\n      results: IssueDetail[]\n    ): Promise<ValidationResult> {\n      return new Promise(resolve => {\n        worker.addEventListener('message', (e: MessageEvent<WorkerMessage>) => {\n          if (isValidationResult(e.data) && e.data.file === xmlName) {\n            resolve(e.data);\n          } else if (isValidationError(e.data)) {\n            const parts = e.data.message.split(': ', 2);\n            const description = parts[1] ? parts[1] : parts[0];\n            const qualifiedTag = parts[1] ? ` (${parts[0]})` : '';\n            results.push({\n              title: description,\n              message: `${e.data.file}:${e.data.line} ${e.data.node} ${e.data.part}${qualifiedTag}`,\n            });\n          }\n        });\n        worker.postMessage({ content: xml, name: xmlName });\n      });\n    }\n\n    validators[xsdName] = validate;\n\n    return new Promise((resolve, reject) => {\n      worker.addEventListener('message', (e: MessageEvent<WorkerMessage>) => {\n        if (isLoadSchemaResult(e.data)) {\n          if (e.data.loaded) resolve(validate);\n          // eslint-disable-next-line prefer-promise-reject-errors\n          else reject('validator.schema.loadEror');\n        }\n      });\n      worker.postMessage({ content: xsd, name: xsdName });\n    });\n  }\n\n  const validate = await getValidator(\n    getSchema(version, revision, release),\n    `SCL${version}${revision}${release}.xsd`\n  );\n\n  const result = await validate(\n    new XMLSerializer().serializeToString(doc),\n    fileName,\n    issues\n  );\n\n  if (result.valid) issues.push({ title: 'Project is schema valid' });\n\n  return issues;\n}\n"],"names":[],"mappings":"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"}