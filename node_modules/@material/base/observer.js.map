{"version":3,"file":"observer.js","sources":["../../../../node_modules/@material/base/observer.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __read, __spreadArray, __values } from \"tslib\";\n/**\n * Mixin to add `MDCObserver` functionality to an optional base class.\n *\n * @deprecated Prefer MDCObserverFoundation for stricter closure compliance.\n * @template C Optional base class constructor type.\n * @param baseClass - Optional base class.\n * @return A class that extends the optional base class with `MDCObserver`\n *     functionality.\n */\nexport function mdcObserver(baseClass) {\n    if (baseClass === void 0) { baseClass = /** @class */ (function () {\n        function class_1() {\n        }\n        return class_1;\n    }()); }\n    // Mixin classes cannot use private members and Symbol() cannot be used in 3P\n    // for IE11.\n    var unobserveMap = new WeakMap();\n    return /** @class */ (function (_super) {\n        __extends(MDCObserver, _super);\n        function MDCObserver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        MDCObserver.prototype.observe = function (target, observers) {\n            var e_1, _a;\n            var _this = this;\n            var cleanup = [];\n            try {\n                for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var property = _c.value;\n                    var observer = observers[property].bind(this);\n                    cleanup.push(observeProperty(target, property, observer));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var unobserve = function () {\n                var e_2, _a;\n                try {\n                    for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {\n                        var cleanupFn = cleanup_1_1.value;\n                        cleanupFn();\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (cleanup_1_1 && !cleanup_1_1.done && (_a = cleanup_1.return)) _a.call(cleanup_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n                var unobserves = unobserveMap.get(_this) || [];\n                var index = unobserves.indexOf(unobserve);\n                if (index > -1) {\n                    unobserves.splice(index, 1);\n                }\n            };\n            var unobserves = unobserveMap.get(this);\n            if (!unobserves) {\n                unobserves = [];\n                unobserveMap.set(this, unobserves);\n            }\n            unobserves.push(unobserve);\n            return unobserve;\n        };\n        MDCObserver.prototype.setObserversEnabled = function (target, enabled) {\n            setObserversEnabled(target, enabled);\n        };\n        MDCObserver.prototype.unobserve = function () {\n            var e_3, _a;\n            // Iterate over a copy since unobserve() will remove themselves from the\n            // array\n            var unobserves = unobserveMap.get(this) || [];\n            try {\n                for (var _b = __values(__spreadArray([], __read(unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var unobserve = _c.value;\n                    unobserve();\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        };\n        return MDCObserver;\n    }(baseClass));\n}\n/**\n * Observe a target's property for changes. When a property changes, the\n * provided `Observer` function will be invoked with the properties current and\n * previous values.\n *\n * The returned cleanup function will stop listening to changes for the\n * provided `Observer`.\n *\n * @template T The observed target type.\n * @template K The observed property.\n * @param target - The target to observe.\n * @param property - The property of the target to observe.\n * @param observer - An observer function to invoke each time the property\n *     changes.\n * @return A cleanup function that will stop observing changes for the provided\n *     `Observer`.\n */\nexport function observeProperty(target, property, observer) {\n    var targetObservers = installObserver(target, property);\n    var observers = targetObservers.getObservers(property);\n    observers.push(observer);\n    return function () {\n        observers.splice(observers.indexOf(observer), 1);\n    };\n}\n/**\n * A Map of all `TargetObservers` that have been installed.\n */\nvar allTargetObservers = new WeakMap();\n/**\n * Installs a `TargetObservers` for the provided target (if not already\n * installed), and replaces the given property with a getter and setter that\n * will respond to changes and call `TargetObservers`.\n *\n * Subsequent calls to `installObserver()` with the same target and property\n * will not override the property's previously installed getter/setter.\n *\n * @template T The observed target type.\n * @template K The observed property to create a getter/setter for.\n * @param target - The target to observe.\n * @param property - The property to create a getter/setter for, if needed.\n * @return The installed `TargetObservers` for the provided target.\n */\nfunction installObserver(target, property) {\n    var observersMap = new Map();\n    if (!allTargetObservers.has(target)) {\n        allTargetObservers.set(target, {\n            isEnabled: true,\n            getObservers: function (key) {\n                var observers = observersMap.get(key) || [];\n                if (!observersMap.has(key)) {\n                    observersMap.set(key, observers);\n                }\n                return observers;\n            },\n            installedProperties: new Set()\n        });\n    }\n    var targetObservers = allTargetObservers.get(target);\n    if (targetObservers.installedProperties.has(property)) {\n        // The getter/setter has already been replaced for this property\n        return targetObservers;\n    }\n    // Retrieve (or create if it's a plain property) the original descriptor from\n    // the target...\n    var descriptor = getDescriptor(target, property) || {\n        configurable: true,\n        enumerable: true,\n        value: target[property],\n        writable: true\n    };\n    // ...and create a copy that will be used for the observer.\n    var observedDescriptor = __assign({}, descriptor);\n    var descGet = descriptor.get, descSet = descriptor.set;\n    if ('value' in descriptor) {\n        // The descriptor is a simple value (not a getter/setter).\n        // For our observer descriptor that we copied, delete the value/writable\n        // properties, since they are incompatible with the get/set properties\n        // for descriptors.\n        delete observedDescriptor.value;\n        delete observedDescriptor.writable;\n        // Set up a simple getter...\n        var value_1 = descriptor.value;\n        descGet = function () { return value_1; };\n        // ...and setter (if the original property was writable).\n        if (descriptor.writable) {\n            descSet = function (newValue) {\n                value_1 = newValue;\n            };\n        }\n    }\n    if (descGet) {\n        observedDescriptor.get = function () {\n            // `this as T` needed for closure conformance\n            return descGet.call(this);\n        };\n    }\n    if (descSet) {\n        observedDescriptor.set = function (newValue) {\n            var e_4, _a;\n            // `thus as T` needed for closure conformance\n            var previous = descGet ? descGet.call(this) : newValue;\n            descSet.call(this, newValue);\n            if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {\n                try {\n                    for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var observer = _c.value;\n                        observer(newValue, previous);\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            }\n        };\n    }\n    targetObservers.installedProperties.add(property);\n    Object.defineProperty(target, property, observedDescriptor);\n    return targetObservers;\n}\n/**\n * Retrieves the descriptor for a property from the provided target. This\n * function will walk up the target's prototype chain to search for the\n * descriptor.\n *\n * @template T The target type.\n * @template K The property type.\n * @param target - The target to retrieve a descriptor from.\n * @param property - The name of the property to retrieve a descriptor for.\n * @return the descriptor, or undefined if it does not exist. Keep in mind that\n *     plain properties may not have a descriptor defined.\n */\nexport function getDescriptor(target, property) {\n    var descriptorTarget = target;\n    var descriptor;\n    while (descriptorTarget) {\n        descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);\n        if (descriptor) {\n            break;\n        }\n        // Walk up the instance's prototype chain in case the property is declared\n        // on a superclass.\n        descriptorTarget = Object.getPrototypeOf(descriptorTarget);\n    }\n    return descriptor;\n}\n/**\n * Enables or disables all observers for a provided target. Changes to observed\n * properties will not call any observers when disabled.\n *\n * @template T The observed target type.\n * @param target - The target to enable or disable observers for.\n * @param enabled - True to enable or false to disable observers.\n */\nexport function setObserversEnabled(target, enabled) {\n    var targetObservers = allTargetObservers.get(target);\n    if (targetObservers) {\n        targetObservers.isEnabled = enabled;\n    }\n}\n//# sourceMappingURL=observer.js.map"],"names":[],"mappings":"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"}