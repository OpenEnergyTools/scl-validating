{"version":3,"file":"accessible-snackbar-label-directive.js","sources":["../../../../node_modules/@material/mwc-snackbar/accessible-snackbar-label-directive.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport MDCSnackbarFoundation from '@material/snackbar/foundation.js';\nimport { html, render } from 'lit';\nimport { AsyncDirective } from 'lit/async-directive.js';\nimport { directive, PartType } from 'lit/directive.js';\nconst { ARIA_LIVE_DELAY_MS } = MDCSnackbarFoundation.numbers;\n/**\n * A lit directive implementation of @material/mdc-snackbar/util.ts#announce,\n * which does some tricks to ensure that snackbar labels will be handled\n * correctly by screen readers.\n *\n * The existing MDC announce util function is difficult to use directly here,\n * because Lit can crash when DOM that it is managing changes outside of its\n * purvue. In this case, we would render our labelText as the text content of\n * the label div, but the MDC announce function then clears that text content,\n * and resets it after a timeout (see below for why). We do the same thing here,\n * but in a way that fits into Lit's lifecycle.\n *\n * TODO(aomarks) Investigate whether this can be simplified; but to do that we\n * first need testing infrastructure to verify that it remains compatible with\n * screen readers. For example, can we just create an entirely new label node\n * every time we open or labelText changes? If not, and the async text/::before\n * swap is strictly required, can we at elast make this directive more generic\n * (e.g. so that we don't hard-code the name of the label class).\n */\nclass AccessibleSnackbarLabel extends AsyncDirective {\n    constructor(partInfo) {\n        super(partInfo);\n        this.labelEl = null;\n        this.timerId = null;\n        this.previousPart = null;\n        if (partInfo.type !== PartType.CHILD) {\n            throw new Error('AccessibleSnackbarLabel only supports child parts.');\n        }\n    }\n    update(part, [labelText, isOpen]) {\n        var _a;\n        if (!isOpen) {\n            // We never need to do anything if we're closed, even if the label also\n            // changed in this batch of changes. We'll fully reset the label text\n            // whenever we next open.\n            return;\n        }\n        if (this.labelEl === null) {\n            // Create the label element once, the first time we open.\n            const wrapperEl = document.createElement('div');\n            const labelTemplate = html `<div class=\"mdc-snackbar__label\" role=\"status\" aria-live=\"polite\"></div>`;\n            render(labelTemplate, wrapperEl);\n            const labelEl = wrapperEl.firstElementChild;\n            labelEl.textContent = labelText;\n            // endNode can't be a Document, so it must have a parent.\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            (_a = part.endNode) === null || _a === void 0 ? void 0 : _a.parentNode.insertBefore(labelEl, part.endNode);\n            this.labelEl = labelEl;\n            // No need to do anything more for ARIA the first time we open. We just\n            // created the element with the current label, so screen readers will\n            // detect it fine.\n            return labelEl;\n        }\n        const labelEl = this.labelEl;\n        // Temporarily disable `aria-live` to prevent JAWS+Firefox from announcing\n        // the message twice.\n        labelEl.setAttribute('aria-live', 'off');\n        // Temporarily clear `textContent` to force a DOM mutation event that will\n        // be detected by screen readers. `aria-live` elements are only announced\n        // when the element's `textContent` *changes*, so snackbars sent to the\n        // browser in the initial HTML response won't be read unless we clear the\n        // element's `textContent` first. Similarly, displaying the same snackbar\n        // message twice in a row doesn't trigger a DOM mutation event, so screen\n        // readers won't announce the second message unless we first clear\n        // `textContent`.\n        //\n        // We have to clear the label text two different ways to make it work in\n        // all browsers and screen readers:\n        //\n        //   1. `textContent = ''` is required for IE11 + JAWS\n        //   2. the lit render of `'&nbsp;'` is required for Chrome + JAWS and\n        //       NVDA\n        //\n        // All other browser/screen reader combinations support both methods.\n        //\n        // The wrapper `<span>` visually hides the space character so that it\n        // doesn't cause jank when added/removed. N.B.: Setting `position:\n        // absolute`, `opacity: 0`, or `height: 0` prevents Chrome from detecting\n        // the DOM change.\n        //\n        // This technique has been tested in:\n        //\n        //   * JAWS 2019:\n        //       - Chrome 70\n        //       - Firefox 60 (ESR)\n        //       - IE 11\n        //   * NVDA 2018:\n        //       - Chrome 70\n        //       - Firefox 60 (ESR)\n        //       - IE 11\n        //   * ChromeVox 53\n        labelEl.textContent = '';\n        // Updating an element using both Lit's `render` as well as setting its\n        // `textContent` can cause later renders to throw because setting\n        // `textContent` will remove Lit's part marker comments. This directive\n        // needs to set `labelEl`'s `textContent` to trigger the expected screen\n        // reader behavior, so it needs to avoid `render` for `labelEl` altogether.\n        const spaceSpan = document.createElement('span');\n        spaceSpan.style.display = 'inline-block';\n        spaceSpan.style.width = '0';\n        spaceSpan.style.height = '1px';\n        spaceSpan.textContent = '\\u00A0'; // U+00A0 is &nbsp;\n        labelEl.appendChild(spaceSpan);\n        // Prevent visual jank by temporarily displaying the label text in the\n        // ::before pseudo-element. CSS generated content is normally announced by\n        // screen readers (except in IE 11; see\n        // https://tink.uk/accessibility-support-for-css-generated-content/);\n        // however, `aria-live` is turned off, so this DOM update will be ignored\n        // by screen readers.\n        labelEl.setAttribute('data-mdc-snackbar-label-text', labelText);\n        if (this.timerId !== null) {\n            // We hadn't yet swapped the textContent back in since the last time we\n            // opened or changed the label. Cancel that task so we don't clobber the\n            // new label.\n            clearTimeout(this.timerId);\n        }\n        this.timerId = window.setTimeout(() => {\n            this.timerId = null;\n            // Allow screen readers to announce changes to the DOM again.\n            labelEl.setAttribute('aria-live', 'polite');\n            // Remove the message from the ::before pseudo-element.\n            labelEl.removeAttribute('data-mdc-snackbar-label-text');\n            // Restore the original label text, which will be announced by\n            // screen readers.\n            labelEl.textContent = labelText;\n            this.setValue(this.labelEl);\n        }, ARIA_LIVE_DELAY_MS);\n        return labelEl;\n    }\n    render(labelText, isOpen) {\n        if (!isOpen) {\n            return html ``;\n        }\n        return html `\n      <div class=\"mdc-snackbar__label\" role=\"status\" aria-live=\"polite\">${labelText}</div>`;\n    }\n}\nexport const accessibleSnackbarLabel = directive(AccessibleSnackbarLabel);\n//# sourceMappingURL=accessible-snackbar-label-directive.js.map"],"names":["AsyncDirective","PartType","html","render","directive"],"mappings":"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"}