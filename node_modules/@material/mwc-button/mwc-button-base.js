import { __decorate } from '../../tslib/tslib.es6.js';
import '../mwc-icon/mwc-icon.js';
import '../mwc-ripple/mwc-ripple.js';
import { ariaProperty } from '../mwc-base/aria-property.js';
import { RippleHandlers } from '../mwc-ripple/ripple-handlers.js';
import '../../@lit/reactive-element/reactive-element.js';
import { html as x } from '../../lit-html/lit-html.js';
import { LitElement as s } from '../../lit-element/lit-element.js';
import { property as n } from '../../@lit/reactive-element/decorators/property.js';
import { state as t } from '../../@lit/reactive-element/decorators/state.js';
import { eventOptions as e$1 } from '../../@lit/reactive-element/decorators/event-options.js';
import { query as i } from '../../@lit/reactive-element/decorators/query.js';
import { queryAsync as e } from '../../@lit/reactive-element/decorators/query-async.js';
import '../../@lit/reactive-element/decorators/query-assigned-elements.js';
import { classMap as o } from '../../lit-html/directives/class-map.js';
import { ifDefined as l } from '../../lit-html/directives/if-defined.js';

/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @soyCompatible */
class ButtonBase extends s {
    constructor() {
        super(...arguments);
        this.raised = false;
        this.unelevated = false;
        this.outlined = false;
        this.dense = false;
        this.disabled = false;
        this.trailingIcon = false;
        this.fullwidth = false;
        this.icon = '';
        this.label = '';
        this.expandContent = false;
        this.shouldRenderRipple = false;
        this.rippleHandlers = new RippleHandlers(() => {
            this.shouldRenderRipple = true;
            return this.ripple;
        });
    }
    /** @soyTemplate */
    renderOverlay() {
        return x ``;
    }
    /** @soyTemplate */
    renderRipple() {
        const filled = this.raised || this.unelevated;
        return this.shouldRenderRipple ?
            x `<mwc-ripple class="ripple" .primary="${!filled}" .disabled="${this.disabled}"></mwc-ripple>` :
            '';
    }
    focus() {
        const buttonElement = this.buttonElement;
        if (buttonElement) {
            this.rippleHandlers.startFocus();
            buttonElement.focus();
        }
    }
    blur() {
        const buttonElement = this.buttonElement;
        if (buttonElement) {
            this.rippleHandlers.endFocus();
            buttonElement.blur();
        }
    }
    /** @soyTemplate */
    getRenderClasses() {
        return {
            'mdc-button--raised': this.raised,
            'mdc-button--unelevated': this.unelevated,
            'mdc-button--outlined': this.outlined,
            'mdc-button--dense': this.dense,
        };
    }
    /**
     * @soyTemplate
     * @soyAttributes buttonAttributes: #button
     * @soyClasses buttonClasses: #button
     */
    render() {
        return x `
      <button
          id="button"
          class="mdc-button ${o(this.getRenderClasses())}"
          ?disabled="${this.disabled}"
          aria-label="${this.label || this.icon}"
          aria-haspopup="${l(this.ariaHasPopup)}"
          @focus="${this.handleRippleFocus}"
          @blur="${this.handleRippleBlur}"
          @mousedown="${this.handleRippleActivate}"
          @mouseenter="${this.handleRippleMouseEnter}"
          @mouseleave="${this.handleRippleMouseLeave}"
          @touchstart="${this.handleRippleActivate}"
          @touchend="${this.handleRippleDeactivate}"
          @touchcancel="${this.handleRippleDeactivate}">
        ${this.renderOverlay()}
        ${this.renderRipple()}
        <span class="leading-icon">
          <slot name="icon">
            ${this.icon && !this.trailingIcon ? this.renderIcon() : ''}
          </slot>
        </span>
        <span class="mdc-button__label">${this.label}</span>
        <span class="slot-container ${o({
            flex: this.expandContent
        })}">
          <slot></slot>
        </span>
        <span class="trailing-icon">
          <slot name="trailingIcon">
            ${this.icon && this.trailingIcon ? this.renderIcon() : ''}
          </slot>
        </span>
      </button>`;
    }
    /** @soyTemplate */
    renderIcon() {
        return x `
    <mwc-icon class="mdc-button__icon">
      ${this.icon}
    </mwc-icon>`;
    }
    handleRippleActivate(evt) {
        const onUp = () => {
            window.removeEventListener('mouseup', onUp);
            this.handleRippleDeactivate();
        };
        window.addEventListener('mouseup', onUp);
        this.rippleHandlers.startPress(evt);
    }
    handleRippleDeactivate() {
        this.rippleHandlers.endPress();
    }
    handleRippleMouseEnter() {
        this.rippleHandlers.startHover();
    }
    handleRippleMouseLeave() {
        this.rippleHandlers.endHover();
    }
    handleRippleFocus() {
        this.rippleHandlers.startFocus();
    }
    handleRippleBlur() {
        this.rippleHandlers.endFocus();
    }
}
ButtonBase.shadowRootOptions = { mode: 'open', delegatesFocus: true };
__decorate([
    ariaProperty,
    n({ type: String, attribute: 'aria-haspopup' })
], ButtonBase.prototype, "ariaHasPopup", void 0);
__decorate([
    n({ type: Boolean, reflect: true })
], ButtonBase.prototype, "raised", void 0);
__decorate([
    n({ type: Boolean, reflect: true })
], ButtonBase.prototype, "unelevated", void 0);
__decorate([
    n({ type: Boolean, reflect: true })
], ButtonBase.prototype, "outlined", void 0);
__decorate([
    n({ type: Boolean })
], ButtonBase.prototype, "dense", void 0);
__decorate([
    n({ type: Boolean, reflect: true })
], ButtonBase.prototype, "disabled", void 0);
__decorate([
    n({ type: Boolean, attribute: 'trailingicon' })
], ButtonBase.prototype, "trailingIcon", void 0);
__decorate([
    n({ type: Boolean, reflect: true })
], ButtonBase.prototype, "fullwidth", void 0);
__decorate([
    n({ type: String })
], ButtonBase.prototype, "icon", void 0);
__decorate([
    n({ type: String })
], ButtonBase.prototype, "label", void 0);
__decorate([
    n({ type: Boolean })
], ButtonBase.prototype, "expandContent", void 0);
__decorate([
    i('#button')
], ButtonBase.prototype, "buttonElement", void 0);
__decorate([
    e('mwc-ripple')
], ButtonBase.prototype, "ripple", void 0);
__decorate([
    t()
], ButtonBase.prototype, "shouldRenderRipple", void 0);
__decorate([
    e$1({ passive: true })
], ButtonBase.prototype, "handleRippleActivate", null);

export { ButtonBase };
//# sourceMappingURL=mwc-button-base.js.map
