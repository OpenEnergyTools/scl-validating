import { validateChildren, iec6185073, iec6185081, getAdjacentClass, iec6185074 } from '../foundation.js';

async function getSpecificDataObject(lnClass, doName) {
    if (!lnClass || !doName)
        return null;
    const lNodeClasses = getAdjacentClass(await iec6185074, lnClass);
    return (lNodeClasses
        .flatMap((lNodeClass) => Array.from(lNodeClass.querySelectorAll(`DataObject`)))
        .find((dataObject) => dataObject.getAttribute("name") === doName) ?? null);
}
async function getNsdReference(element) {
    const id = element.getAttribute("id");
    if (!id)
        return null;
    const doOrSdo = element
        .closest("DataTypeTemplates")
        ?.querySelector(`LNodeType > DO[type="${id}"], LNodeType > SDO[type="${id}"]`);
    const doName = doOrSdo?.getAttribute("name");
    const lNodeType = doOrSdo?.parentElement;
    const lnClass = lNodeType?.getAttribute("lnClass");
    return getSpecificDataObject(lnClass, doName);
}
function getControlServicePresConditions(ctlModel) {
    if (!ctlModel || ctlModel === "status-only")
        return [];
    if (ctlModel.includes("direct"))
        return ["MOctrl"];
    if (ctlModel.includes("normal"))
        return ["MOctrl", "MOsbo", "MOsboNormal"];
    if (ctlModel.includes("enhanced"))
        return ["MOctrl", "MOsbo", "MOsboEnhanced"];
    return [];
}
async function getMandatoryDataAttribute(doType, cdc) {
    const nsd73 = await iec6185073;
    const nsd81 = await iec6185081;
    const dataAttributes = Array.from(nsd73.querySelectorAll(`CDC[name="${cdc}"] > DataAttribute[presCond="M"]`));
    const servicePresConds = getControlServicePresConditions(doType.querySelector('DA[name="ctlModel"] > Val')?.textContent?.trim());
    const serviceDataAttribute = Array.from(nsd81.querySelectorAll(`ServiceCDC[cdc="${cdc}"] > ServiceDataAttribute`)).filter((da) => servicePresConds.includes(da.getAttribute("presCond")));
    return dataAttributes.concat(serviceDataAttribute);
}
async function validateAttributes(doType, cdc) {
    const reference = await getNsdReference(doType);
    if (reference && cdc !== reference.getAttribute("type"))
        return [
            {
                title: `Incorrect common data class. Expected is ${reference}`,
                message: `${doType.getAttribute("id")}(${cdc})`,
            },
        ];
    return [];
}
async function missingMandatoryChildren(dotype, cdc) {
    const errors = [];
    const mandatoryDAs = (await getMandatoryDataAttribute(dotype, cdc)).map((DA) => DA.getAttribute("name"));
    mandatoryDAs.forEach((mandatoryDa) => {
        if (!dotype.querySelector(`DA[name="${mandatoryDa}"]`))
            errors.push({
                title: `Missing mandatory data attribute ${mandatoryDa}`,
                message: `${dotype.getAttribute("id")}(${cdc})`,
            });
    });
    return errors;
}
async function dOTypeValidator(doType) {
    const errors = [];
    if (doType.tagName !== "DOType")
        return [];
    const cdc = doType.getAttribute("cdc");
    if (!cdc)
        return [
            {
                title: `Missing mandatory attribute cdc`,
                message: `${doType.getAttribute("id")}`,
            },
        ];
    const incorrectAttributes = await validateAttributes(doType, cdc);
    const missingChildren = await missingMandatoryChildren(doType, cdc);
    const issuesChildren = await validateChildren(doType);
    return errors.concat(missingChildren, issuesChildren, incorrectAttributes);
}

export { dOTypeValidator };
//# sourceMappingURL=doType.js.map
