{"version":3,"file":"xml-schema-validator.js","sources":["../../../../../node_modules/@openenergytools/xml-schema-validator/dist/xml-schema-validator.js"],"sourcesContent":["function isValidationResult(msg) {\n    return (typeof msg !== \"string\" &&\n        msg.file !== undefined &&\n        msg.valid !== undefined &&\n        msg.loaded === undefined);\n}\nexport function isValidationError(msg) {\n    return (typeof msg !== \"string\" &&\n        msg.file !== undefined &&\n        msg.valid === undefined &&\n        msg.loaded === undefined);\n}\nexport function isLoadSchemaResult(msg) {\n    return (typeof msg !== \"string\" &&\n        msg.file !== undefined &&\n        msg.valid === undefined &&\n        msg.loaded !== undefined);\n}\nconst validators = {};\nexport async function validate(xml, xsd) {\n    const issues = [];\n    async function getValidator(xsd, xsdName) {\n        // Catch browsers not supporting workers\n        if (!window.Worker)\n            throw new Error(\"Invalid schema\");\n        // Avoid init same XSD multiple times\n        if (validators[xsdName])\n            return validators[xsdName];\n        const worker = new Worker(new URL(\"./xmlvalidate/worker.js\", import.meta.url));\n        async function validate(xml, xmlName, results) {\n            return new Promise((resolve) => {\n                worker.addEventListener(\"message\", (e) => {\n                    if (isValidationResult(e.data) && e.data.file === xmlName) {\n                        resolve(e.data);\n                    }\n                    else if (isValidationError(e.data)) {\n                        const parts = e.data.message.split(\": \", 2);\n                        const description = parts[1] ? parts[1] : parts[0];\n                        const qualifiedTag = parts[1] ? ` (${parts[0]})` : \"\";\n                        results.push({\n                            title: description,\n                            message: `${e.data.file}:${e.data.line} ${e.data.node} ${e.data.part}${qualifiedTag}`,\n                        });\n                    }\n                });\n                worker.postMessage({ content: xml, name: xmlName });\n            });\n        }\n        validators[xsdName] = validate;\n        return new Promise((resolve, reject) => {\n            worker.addEventListener(\"message\", (e) => {\n                if (isLoadSchemaResult(e.data)) {\n                    if (e.data.loaded)\n                        resolve(validate);\n                    else\n                        reject(\"Schema cannot be loaded\");\n                }\n            });\n            worker.postMessage({ content: xsd, name: xsdName });\n        });\n    }\n    try {\n        const validate = await getValidator(xsd.content, xsd.name);\n        const result = await validate(xml.content, xml.name, issues);\n        if (result.valid)\n            issues.push({ title: \"Project is schema valid\" });\n    }\n    catch {\n        return null;\n    }\n    return issues;\n}\n//# sourceMappingURL=xml-schema-validator.js.map"],"names":[],"mappings":"AAAA,SAAS,kBAAkB,CAAC,GAAG,EAAE;AACjC,IAAI,QAAQ,OAAO,GAAG,KAAK,QAAQ;AACnC,QAAQ,GAAG,CAAC,IAAI,KAAK,SAAS;AAC9B,QAAQ,GAAG,CAAC,KAAK,KAAK,SAAS;AAC/B,QAAQ,GAAG,CAAC,MAAM,KAAK,SAAS,EAAE;AAClC,CAAC;AACM,SAAS,iBAAiB,CAAC,GAAG,EAAE;AACvC,IAAI,QAAQ,OAAO,GAAG,KAAK,QAAQ;AACnC,QAAQ,GAAG,CAAC,IAAI,KAAK,SAAS;AAC9B,QAAQ,GAAG,CAAC,KAAK,KAAK,SAAS;AAC/B,QAAQ,GAAG,CAAC,MAAM,KAAK,SAAS,EAAE;AAClC,CAAC;AACM,SAAS,kBAAkB,CAAC,GAAG,EAAE;AACxC,IAAI,QAAQ,OAAO,GAAG,KAAK,QAAQ;AACnC,QAAQ,GAAG,CAAC,IAAI,KAAK,SAAS;AAC9B,QAAQ,GAAG,CAAC,KAAK,KAAK,SAAS;AAC/B,QAAQ,GAAG,CAAC,MAAM,KAAK,SAAS,EAAE;AAClC,CAAC;AACD,MAAM,UAAU,GAAG,EAAE,CAAC;AACf,eAAe,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE;AACzC,IAAI,MAAM,MAAM,GAAG,EAAE,CAAC;AACtB,IAAI,eAAe,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE;AAC9C;AACA,QAAQ,IAAI,CAAC,MAAM,CAAC,MAAM;AAC1B,YAAY,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;AAC9C;AACA,QAAQ,IAAI,UAAU,CAAC,OAAO,CAAC;AAC/B,YAAY,OAAO,UAAU,CAAC,OAAO,CAAC,CAAC;AACvC,QAAQ,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACvF,QAAQ,eAAe,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE;AACvD,YAAY,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;AAC5C,gBAAgB,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,KAAK;AAC1D,oBAAoB,IAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;AAC/E,wBAAwB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;AACxC,qBAAqB;AACrB,yBAAyB,IAAI,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;AACxD,wBAAwB,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AACpE,wBAAwB,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3E,wBAAwB,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;AAC9E,wBAAwB,OAAO,CAAC,IAAI,CAAC;AACrC,4BAA4B,KAAK,EAAE,WAAW;AAC9C,4BAA4B,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,CAAC;AACjH,yBAAyB,CAAC,CAAC;AAC3B,qBAAqB;AACrB,iBAAiB,CAAC,CAAC;AACnB,gBAAgB,MAAM,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;AACpE,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,UAAU,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;AACvC,QAAQ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAChD,YAAY,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAAC,KAAK;AACtD,gBAAgB,IAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;AAChD,oBAAoB,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM;AACrC,wBAAwB,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1C;AACA,wBAAwB,MAAM,CAAC,yBAAyB,CAAC,CAAC;AAC1D,iBAAiB;AACjB,aAAa,CAAC,CAAC;AACf,YAAY,MAAM,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;AAChE,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,IAAI;AACR,QAAQ,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;AACnE,QAAQ,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACrE,QAAQ,IAAI,MAAM,CAAC,KAAK;AACxB,YAAY,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,yBAAyB,EAAE,CAAC,CAAC;AAC9D,KAAK;AACL,IAAI,MAAM;AACV,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB;;;;"}