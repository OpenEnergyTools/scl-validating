{"version":3,"file":"blocking-elements.js","sources":["../../../../node_modules/blocking-elements/dist/blocking-elements.js"],"sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(() => {\n    var _a, _b, _c;\n    /* Symbols for private properties */\n    const _blockingElements = Symbol();\n    const _alreadyInertElements = Symbol();\n    const _topElParents = Symbol();\n    const _siblingsToRestore = Symbol();\n    const _parentMO = Symbol();\n    /* Symbols for private static methods */\n    const _topChanged = Symbol();\n    const _swapInertedSibling = Symbol();\n    const _inertSiblings = Symbol();\n    const _restoreInertedSiblings = Symbol();\n    const _getParents = Symbol();\n    const _getDistributedChildren = Symbol();\n    const _isInertable = Symbol();\n    const _handleMutations = Symbol();\n    class BlockingElementsImpl {\n        constructor() {\n            /**\n             * The blocking elements.\n             */\n            this[_a] = [];\n            /**\n             * Used to keep track of the parents of the top element, from the element\n             * itself up to body. When top changes, the old top might have been removed\n             * from the document, so we need to memoize the inerted parents' siblings\n             * in order to restore their inerteness when top changes.\n             */\n            this[_b] = [];\n            /**\n             * Elements that are already inert before the first blocking element is\n             * pushed.\n             */\n            this[_c] = new Set();\n        }\n        destructor() {\n            // Restore original inertness.\n            this[_restoreInertedSiblings](this[_topElParents]);\n            // Note we don't want to make these properties nullable on the class,\n            // since then we'd need non-null casts in many places. Calling a method on\n            // a BlockingElements instance after calling destructor will result in an\n            // exception.\n            const nullable = this;\n            nullable[_blockingElements] = null;\n            nullable[_topElParents] = null;\n            nullable[_alreadyInertElements] = null;\n        }\n        get top() {\n            const elems = this[_blockingElements];\n            return elems[elems.length - 1] || null;\n        }\n        push(element) {\n            if (!element || element === this.top) {\n                return;\n            }\n            // Remove it from the stack, we'll bring it to the top.\n            this.remove(element);\n            this[_topChanged](element);\n            this[_blockingElements].push(element);\n        }\n        remove(element) {\n            const i = this[_blockingElements].indexOf(element);\n            if (i === -1) {\n                return false;\n            }\n            this[_blockingElements].splice(i, 1);\n            // Top changed only if the removed element was the top element.\n            if (i === this[_blockingElements].length) {\n                this[_topChanged](this.top);\n            }\n            return true;\n        }\n        pop() {\n            const top = this.top;\n            top && this.remove(top);\n            return top;\n        }\n        has(element) {\n            return this[_blockingElements].indexOf(element) !== -1;\n        }\n        /**\n         * Sets `inert` to all document elements except the new top element, its\n         * parents, and its distributed content.\n         */\n        [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {\n            const toKeepInert = this[_alreadyInertElements];\n            const oldParents = this[_topElParents];\n            // No new top, reset old top if any.\n            if (!newTop) {\n                this[_restoreInertedSiblings](oldParents);\n                toKeepInert.clear();\n                this[_topElParents] = [];\n                return;\n            }\n            const newParents = this[_getParents](newTop);\n            // New top is not contained in the main document!\n            if (newParents[newParents.length - 1].parentNode !== document.body) {\n                throw Error('Non-connected element cannot be a blocking element');\n            }\n            // Cast here because we know we'll call _inertSiblings on newParents\n            // below.\n            this[_topElParents] = newParents;\n            const toSkip = this[_getDistributedChildren](newTop);\n            // No previous top element.\n            if (!oldParents.length) {\n                this[_inertSiblings](newParents, toSkip, toKeepInert);\n                return;\n            }\n            let i = oldParents.length - 1;\n            let j = newParents.length - 1;\n            // Find common parent. Index 0 is the element itself (so stop before it).\n            while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {\n                i--;\n                j--;\n            }\n            // If up the parents tree there are 2 elements that are siblings, swap\n            // the inerted sibling.\n            if (oldParents[i] !== newParents[j]) {\n                this[_swapInertedSibling](oldParents[i], newParents[j]);\n            }\n            // Restore old parents siblings inertness.\n            i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i));\n            // Make new parents siblings inert.\n            j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);\n        }\n        /**\n         * Swaps inertness between two sibling elements.\n         * Sets the property `inert` over the attribute since the inert spec\n         * doesn't specify if it should be reflected.\n         * https://html.spec.whatwg.org/multipage/interaction.html#inert\n         */\n        [_swapInertedSibling](oldInert, newInert) {\n            const siblingsToRestore = oldInert[_siblingsToRestore];\n            // oldInert is not contained in siblings to restore, so we have to check\n            // if it's inertable and if already inert.\n            if (this[_isInertable](oldInert) && !oldInert.inert) {\n                oldInert.inert = true;\n                siblingsToRestore.add(oldInert);\n            }\n            // If newInert was already between the siblings to restore, it means it is\n            // inertable and must be restored.\n            if (siblingsToRestore.has(newInert)) {\n                newInert.inert = false;\n                siblingsToRestore.delete(newInert);\n            }\n            newInert[_parentMO] = oldInert[_parentMO];\n            newInert[_siblingsToRestore] = siblingsToRestore;\n            oldInert[_parentMO] = undefined;\n            oldInert[_siblingsToRestore] = undefined;\n        }\n        /**\n         * Restores original inertness to the siblings of the elements.\n         * Sets the property `inert` over the attribute since the inert spec\n         * doesn't specify if it should be reflected.\n         * https://html.spec.whatwg.org/multipage/interaction.html#inert\n         */\n        [_restoreInertedSiblings](elements) {\n            for (const element of elements) {\n                const mo = element[_parentMO];\n                mo.disconnect();\n                element[_parentMO] = undefined;\n                const siblings = element[_siblingsToRestore];\n                for (const sibling of siblings) {\n                    sibling.inert = false;\n                }\n                element[_siblingsToRestore] = undefined;\n            }\n        }\n        /**\n         * Inerts the siblings of the elements except the elements to skip. Stores\n         * the inerted siblings into the element's symbol `_siblingsToRestore`.\n         * Pass `toKeepInert` to collect the already inert elements.\n         * Sets the property `inert` over the attribute since the inert spec\n         * doesn't specify if it should be reflected.\n         * https://html.spec.whatwg.org/multipage/interaction.html#inert\n         */\n        [_inertSiblings](elements, toSkip, toKeepInert) {\n            for (const element of elements) {\n                // Assume element is not a Document, so it must have a parentNode.\n                const parent = element.parentNode;\n                const children = parent.children;\n                const inertedSiblings = new Set();\n                for (let j = 0; j < children.length; j++) {\n                    const sibling = children[j];\n                    // Skip the input element, if not inertable or to be skipped.\n                    if (sibling === element || !this[_isInertable](sibling) ||\n                        (toSkip && toSkip.has(sibling))) {\n                        continue;\n                    }\n                    // Should be collected since already inerted.\n                    if (toKeepInert && sibling.inert) {\n                        toKeepInert.add(sibling);\n                    }\n                    else {\n                        sibling.inert = true;\n                        inertedSiblings.add(sibling);\n                    }\n                }\n                // Store the siblings that were inerted.\n                element[_siblingsToRestore] = inertedSiblings;\n                // Observe only immediate children mutations on the parent.\n                const mo = new MutationObserver(this[_handleMutations].bind(this));\n                element[_parentMO] = mo;\n                let parentToObserve = parent;\n                // If we're using the ShadyDOM polyfill, then our parent could be a\n                // shady root, which is an object that acts like a ShadowRoot, but isn't\n                // actually a node in the real DOM. Observe the real DOM parent instead.\n                const maybeShadyRoot = parentToObserve;\n                if (maybeShadyRoot.__shady && maybeShadyRoot.host) {\n                    parentToObserve = maybeShadyRoot.host;\n                }\n                mo.observe(parentToObserve, {\n                    childList: true,\n                });\n            }\n        }\n        /**\n         * Handles newly added/removed nodes by toggling their inertness.\n         * It also checks if the current top Blocking Element has been removed,\n         * notifying and removing it.\n         */\n        [_handleMutations](mutations) {\n            const parents = this[_topElParents];\n            const toKeepInert = this[_alreadyInertElements];\n            for (const mutation of mutations) {\n                // If the target is a shadowRoot, get its host as we skip shadowRoots when\n                // computing _topElParents.\n                const target = mutation.target.host || mutation.target;\n                const idx = target === document.body ?\n                    parents.length :\n                    parents.indexOf(target);\n                const inertedChild = parents[idx - 1];\n                const inertedSiblings = inertedChild[_siblingsToRestore];\n                // To restore.\n                for (let i = 0; i < mutation.removedNodes.length; i++) {\n                    const sibling = mutation.removedNodes[i];\n                    if (sibling === inertedChild) {\n                        console.info('Detected removal of the top Blocking Element.');\n                        this.pop();\n                        return;\n                    }\n                    if (inertedSiblings.has(sibling)) {\n                        sibling.inert = false;\n                        inertedSiblings.delete(sibling);\n                    }\n                }\n                // To inert.\n                for (let i = 0; i < mutation.addedNodes.length; i++) {\n                    const sibling = mutation.addedNodes[i];\n                    if (!this[_isInertable](sibling)) {\n                        continue;\n                    }\n                    if (toKeepInert && sibling.inert) {\n                        toKeepInert.add(sibling);\n                    }\n                    else {\n                        sibling.inert = true;\n                        inertedSiblings.add(sibling);\n                    }\n                }\n            }\n        }\n        /**\n         * Returns if the element is inertable.\n         */\n        [_isInertable](element) {\n            return false === /^(style|template|script)$/.test(element.localName);\n        }\n        /**\n         * Returns the list of newParents of an element, starting from element\n         * (included) up to `document.body` (excluded).\n         */\n        [_getParents](element) {\n            const parents = [];\n            let current = element;\n            // Stop to body.\n            while (current && current !== document.body) {\n                // Skip shadow roots.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    parents.push(current);\n                }\n                // ShadowDom v1\n                if (current.assignedSlot) {\n                    // Collect slots from deepest slot to top.\n                    while (current = current.assignedSlot) {\n                        parents.push(current);\n                    }\n                    // Continue the search on the top slot.\n                    current = parents.pop();\n                    continue;\n                }\n                current = current.parentNode ||\n                    current.host;\n            }\n            return parents;\n        }\n        /**\n         * Returns the distributed children of the element's shadow root.\n         * Returns null if the element doesn't have a shadow root.\n         */\n        [_getDistributedChildren](element) {\n            const shadowRoot = element.shadowRoot;\n            if (!shadowRoot) {\n                return null;\n            }\n            const result = new Set();\n            let i;\n            let j;\n            let nodes;\n            const slots = shadowRoot.querySelectorAll('slot');\n            if (slots.length && slots[0].assignedNodes) {\n                for (i = 0; i < slots.length; i++) {\n                    nodes = slots[i].assignedNodes({\n                        flatten: true,\n                    });\n                    for (j = 0; j < nodes.length; j++) {\n                        if (nodes[j].nodeType === Node.ELEMENT_NODE) {\n                            result.add(nodes[j]);\n                        }\n                    }\n                }\n                // No need to search for <content>.\n            }\n            return result;\n        }\n    }\n    document.$blockingElements =\n        new BlockingElementsImpl();\n})();\n//# sourceMappingURL=blocking-elements.js.map"],"names":[],"mappings":"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"}