{"version":3,"file":"inert.js","sources":["../../../../node_modules/wicg-inert/dist/inert.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define('inert', factory) :\n  (factory());\n}(this, (function () { 'use strict';\n\n  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  /**\n   * This work is licensed under the W3C Software and Document License\n   * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).\n   */\n\n  (function () {\n    // Return early if we're not running inside of the browser.\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    // Convenience function for converting NodeLists.\n    /** @type {typeof Array.prototype.slice} */\n    var slice = Array.prototype.slice;\n\n    /**\n     * IE has a non-standard name for \"matches\".\n     * @type {typeof Element.prototype.matches}\n     */\n    var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;\n\n    /** @type {string} */\n    var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');\n\n    /**\n     * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`\n     * attribute.\n     *\n     * Its main functions are:\n     *\n     * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the\n     *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering\n     *   each focusable node in the subtree with the singleton `InertManager` which manages all known\n     *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`\n     *   instance exists for each focusable node which has at least one inert root as an ancestor.\n     *\n     * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`\n     *   attribute is removed from the root node). This is handled in the destructor, which calls the\n     *   `deregister` method on `InertManager` for each managed inert node.\n     */\n\n    var InertRoot = function () {\n      /**\n       * @param {!HTMLElement} rootElement The HTMLElement at the root of the inert subtree.\n       * @param {!InertManager} inertManager The global singleton InertManager object.\n       */\n      function InertRoot(rootElement, inertManager) {\n        _classCallCheck(this, InertRoot);\n\n        /** @type {!InertManager} */\n        this._inertManager = inertManager;\n\n        /** @type {!HTMLElement} */\n        this._rootElement = rootElement;\n\n        /**\n         * @type {!Set<!InertNode>}\n         * All managed focusable nodes in this InertRoot's subtree.\n         */\n        this._managedNodes = new Set();\n\n        // Make the subtree hidden from assistive technology\n        if (this._rootElement.hasAttribute('aria-hidden')) {\n          /** @type {?string} */\n          this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');\n        } else {\n          this._savedAriaHidden = null;\n        }\n        this._rootElement.setAttribute('aria-hidden', 'true');\n\n        // Make all focusable elements in the subtree unfocusable and add them to _managedNodes\n        this._makeSubtreeUnfocusable(this._rootElement);\n\n        // Watch for:\n        // - any additions in the subtree: make them unfocusable too\n        // - any removals from the subtree: remove them from this inert root's managed nodes\n        // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable\n        //   element, make that node a managed node.\n        this._observer = new MutationObserver(this._onMutation.bind(this));\n        this._observer.observe(this._rootElement, { attributes: true, childList: true, subtree: true });\n      }\n\n      /**\n       * Call this whenever this object is about to become obsolete.  This unwinds all of the state\n       * stored in this object and updates the state of all of the managed nodes.\n       */\n\n\n      _createClass(InertRoot, [{\n        key: 'destructor',\n        value: function destructor() {\n          this._observer.disconnect();\n\n          if (this._rootElement) {\n            if (this._savedAriaHidden !== null) {\n              this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);\n            } else {\n              this._rootElement.removeAttribute('aria-hidden');\n            }\n          }\n\n          this._managedNodes.forEach(function (inertNode) {\n            this._unmanageNode(inertNode.node);\n          }, this);\n\n          // Note we cast the nulls to the ANY type here because:\n          // 1) We want the class properties to be declared as non-null, or else we\n          //    need even more casts throughout this code. All bets are off if an\n          //    instance has been destroyed and a method is called.\n          // 2) We don't want to cast \"this\", because we want type-aware optimizations\n          //    to know which properties we're setting.\n          this._observer = /** @type {?} */null;\n          this._rootElement = /** @type {?} */null;\n          this._managedNodes = /** @type {?} */null;\n          this._inertManager = /** @type {?} */null;\n        }\n\n        /**\n         * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.\n         */\n\n      }, {\n        key: '_makeSubtreeUnfocusable',\n\n\n        /**\n         * @param {!Node} startNode\n         */\n        value: function _makeSubtreeUnfocusable(startNode) {\n          var _this2 = this;\n\n          composedTreeWalk(startNode, function (node) {\n            return _this2._visitNode(node);\n          });\n\n          var activeElement = document.activeElement;\n\n          if (!document.body.contains(startNode)) {\n            // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.\n            var node = startNode;\n            /** @type {!ShadowRoot|undefined} */\n            var root = undefined;\n            while (node) {\n              if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n                root = /** @type {!ShadowRoot} */node;\n                break;\n              }\n              node = node.parentNode;\n            }\n            if (root) {\n              activeElement = root.activeElement;\n            }\n          }\n          if (startNode.contains(activeElement)) {\n            activeElement.blur();\n            // In IE11, if an element is already focused, and then set to tabindex=-1\n            // calling blur() will not actually move the focus.\n            // To work around this we call focus() on the body instead.\n            if (activeElement === document.activeElement) {\n              document.body.focus();\n            }\n          }\n        }\n\n        /**\n         * @param {!Node} node\n         */\n\n      }, {\n        key: '_visitNode',\n        value: function _visitNode(node) {\n          if (node.nodeType !== Node.ELEMENT_NODE) {\n            return;\n          }\n          var element = /** @type {!HTMLElement} */node;\n\n          // If a descendant inert root becomes un-inert, its descendants will still be inert because of\n          // this inert root, so all of its managed nodes need to be adopted by this InertRoot.\n          if (element !== this._rootElement && element.hasAttribute('inert')) {\n            this._adoptInertRoot(element);\n          }\n\n          if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {\n            this._manageNode(element);\n          }\n        }\n\n        /**\n         * Register the given node with this InertRoot and with InertManager.\n         * @param {!Node} node\n         */\n\n      }, {\n        key: '_manageNode',\n        value: function _manageNode(node) {\n          var inertNode = this._inertManager.register(node, this);\n          this._managedNodes.add(inertNode);\n        }\n\n        /**\n         * Unregister the given node with this InertRoot and with InertManager.\n         * @param {!Node} node\n         */\n\n      }, {\n        key: '_unmanageNode',\n        value: function _unmanageNode(node) {\n          var inertNode = this._inertManager.deregister(node, this);\n          if (inertNode) {\n            this._managedNodes['delete'](inertNode);\n          }\n        }\n\n        /**\n         * Unregister the entire subtree starting at `startNode`.\n         * @param {!Node} startNode\n         */\n\n      }, {\n        key: '_unmanageSubtree',\n        value: function _unmanageSubtree(startNode) {\n          var _this3 = this;\n\n          composedTreeWalk(startNode, function (node) {\n            return _this3._unmanageNode(node);\n          });\n        }\n\n        /**\n         * If a descendant node is found with an `inert` attribute, adopt its managed nodes.\n         * @param {!HTMLElement} node\n         */\n\n      }, {\n        key: '_adoptInertRoot',\n        value: function _adoptInertRoot(node) {\n          var inertSubroot = this._inertManager.getInertRoot(node);\n\n          // During initialisation this inert root may not have been registered yet,\n          // so register it now if need be.\n          if (!inertSubroot) {\n            this._inertManager.setInert(node, true);\n            inertSubroot = this._inertManager.getInertRoot(node);\n          }\n\n          inertSubroot.managedNodes.forEach(function (savedInertNode) {\n            this._manageNode(savedInertNode.node);\n          }, this);\n        }\n\n        /**\n         * Callback used when mutation observer detects subtree additions, removals, or attribute changes.\n         * @param {!Array<!MutationRecord>} records\n         * @param {!MutationObserver} self\n         */\n\n      }, {\n        key: '_onMutation',\n        value: function _onMutation(records, self) {\n          records.forEach(function (record) {\n            var target = /** @type {!HTMLElement} */record.target;\n            if (record.type === 'childList') {\n              // Manage added nodes\n              slice.call(record.addedNodes).forEach(function (node) {\n                this._makeSubtreeUnfocusable(node);\n              }, this);\n\n              // Un-manage removed nodes\n              slice.call(record.removedNodes).forEach(function (node) {\n                this._unmanageSubtree(node);\n              }, this);\n            } else if (record.type === 'attributes') {\n              if (record.attributeName === 'tabindex') {\n                // Re-initialise inert node if tabindex changes\n                this._manageNode(target);\n              } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {\n                // If a new inert root is added, adopt its managed nodes and make sure it knows about the\n                // already managed nodes from this inert subroot.\n                this._adoptInertRoot(target);\n                var inertSubroot = this._inertManager.getInertRoot(target);\n                this._managedNodes.forEach(function (managedNode) {\n                  if (target.contains(managedNode.node)) {\n                    inertSubroot._manageNode(managedNode.node);\n                  }\n                });\n              }\n            }\n          }, this);\n        }\n      }, {\n        key: 'managedNodes',\n        get: function get() {\n          return new Set(this._managedNodes);\n        }\n\n        /** @return {boolean} */\n\n      }, {\n        key: 'hasSavedAriaHidden',\n        get: function get() {\n          return this._savedAriaHidden !== null;\n        }\n\n        /** @param {?string} ariaHidden */\n\n      }, {\n        key: 'savedAriaHidden',\n        set: function set(ariaHidden) {\n          this._savedAriaHidden = ariaHidden;\n        }\n\n        /** @return {?string} */\n        ,\n        get: function get() {\n          return this._savedAriaHidden;\n        }\n      }]);\n\n      return InertRoot;\n    }();\n\n    /**\n     * `InertNode` initialises and manages a single inert node.\n     * A node is inert if it is a descendant of one or more inert root elements.\n     *\n     * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and\n     * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element\n     * is intrinsically focusable or not.\n     *\n     * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an\n     * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the\n     * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s\n     * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,\n     * or removes the `tabindex` attribute if the element is intrinsically focusable.\n     */\n\n\n    var InertNode = function () {\n      /**\n       * @param {!Node} node A focusable element to be made inert.\n       * @param {!InertRoot} inertRoot The inert root element associated with this inert node.\n       */\n      function InertNode(node, inertRoot) {\n        _classCallCheck(this, InertNode);\n\n        /** @type {!Node} */\n        this._node = node;\n\n        /** @type {boolean} */\n        this._overrodeFocusMethod = false;\n\n        /**\n         * @type {!Set<!InertRoot>} The set of descendant inert roots.\n         *    If and only if this set becomes empty, this node is no longer inert.\n         */\n        this._inertRoots = new Set([inertRoot]);\n\n        /** @type {?number} */\n        this._savedTabIndex = null;\n\n        /** @type {boolean} */\n        this._destroyed = false;\n\n        // Save any prior tabindex info and make this node untabbable\n        this.ensureUntabbable();\n      }\n\n      /**\n       * Call this whenever this object is about to become obsolete.\n       * This makes the managed node focusable again and deletes all of the previously stored state.\n       */\n\n\n      _createClass(InertNode, [{\n        key: 'destructor',\n        value: function destructor() {\n          this._throwIfDestroyed();\n\n          if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {\n            var element = /** @type {!HTMLElement} */this._node;\n            if (this._savedTabIndex !== null) {\n              element.setAttribute('tabindex', this._savedTabIndex);\n            } else {\n              element.removeAttribute('tabindex');\n            }\n\n            // Use `delete` to restore native focus method.\n            if (this._overrodeFocusMethod) {\n              delete element.focus;\n            }\n          }\n\n          // See note in InertRoot.destructor for why we cast these nulls to ANY.\n          this._node = /** @type {?} */null;\n          this._inertRoots = /** @type {?} */null;\n          this._destroyed = true;\n        }\n\n        /**\n         * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.\n         * If the object has been destroyed, any attempt to access it will cause an exception.\n         */\n\n      }, {\n        key: '_throwIfDestroyed',\n\n\n        /**\n         * Throw if user tries to access destroyed InertNode.\n         */\n        value: function _throwIfDestroyed() {\n          if (this.destroyed) {\n            throw new Error('Trying to access destroyed InertNode');\n          }\n        }\n\n        /** @return {boolean} */\n\n      }, {\n        key: 'ensureUntabbable',\n\n\n        /** Save the existing tabindex value and make the node untabbable and unfocusable */\n        value: function ensureUntabbable() {\n          if (this.node.nodeType !== Node.ELEMENT_NODE) {\n            return;\n          }\n          var element = /** @type {!HTMLElement} */this.node;\n          if (matches.call(element, _focusableElementsString)) {\n            if ( /** @type {!HTMLElement} */element.tabIndex === -1 && this.hasSavedTabIndex) {\n              return;\n            }\n\n            if (element.hasAttribute('tabindex')) {\n              this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n            }\n            element.setAttribute('tabindex', '-1');\n            if (element.nodeType === Node.ELEMENT_NODE) {\n              element.focus = function () {};\n              this._overrodeFocusMethod = true;\n            }\n          } else if (element.hasAttribute('tabindex')) {\n            this._savedTabIndex = /** @type {!HTMLElement} */element.tabIndex;\n            element.removeAttribute('tabindex');\n          }\n        }\n\n        /**\n         * Add another inert root to this inert node's set of managing inert roots.\n         * @param {!InertRoot} inertRoot\n         */\n\n      }, {\n        key: 'addInertRoot',\n        value: function addInertRoot(inertRoot) {\n          this._throwIfDestroyed();\n          this._inertRoots.add(inertRoot);\n        }\n\n        /**\n         * Remove the given inert root from this inert node's set of managing inert roots.\n         * If the set of managing inert roots becomes empty, this node is no longer inert,\n         * so the object should be destroyed.\n         * @param {!InertRoot} inertRoot\n         */\n\n      }, {\n        key: 'removeInertRoot',\n        value: function removeInertRoot(inertRoot) {\n          this._throwIfDestroyed();\n          this._inertRoots['delete'](inertRoot);\n          if (this._inertRoots.size === 0) {\n            this.destructor();\n          }\n        }\n      }, {\n        key: 'destroyed',\n        get: function get() {\n          return (/** @type {!InertNode} */this._destroyed\n          );\n        }\n      }, {\n        key: 'hasSavedTabIndex',\n        get: function get() {\n          return this._savedTabIndex !== null;\n        }\n\n        /** @return {!Node} */\n\n      }, {\n        key: 'node',\n        get: function get() {\n          this._throwIfDestroyed();\n          return this._node;\n        }\n\n        /** @param {?number} tabIndex */\n\n      }, {\n        key: 'savedTabIndex',\n        set: function set(tabIndex) {\n          this._throwIfDestroyed();\n          this._savedTabIndex = tabIndex;\n        }\n\n        /** @return {?number} */\n        ,\n        get: function get() {\n          this._throwIfDestroyed();\n          return this._savedTabIndex;\n        }\n      }]);\n\n      return InertNode;\n    }();\n\n    /**\n     * InertManager is a per-document singleton object which manages all inert roots and nodes.\n     *\n     * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`\n     * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.\n     * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant\n     * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance\n     * is created for each such node, via the `_managedNodes` map.\n     */\n\n\n    var InertManager = function () {\n      /**\n       * @param {!Document} document\n       */\n      function InertManager(document) {\n        _classCallCheck(this, InertManager);\n\n        if (!document) {\n          throw new Error('Missing required argument; InertManager needs to wrap a document.');\n        }\n\n        /** @type {!Document} */\n        this._document = document;\n\n        /**\n         * All managed nodes known to this InertManager. In a map to allow looking up by Node.\n         * @type {!Map<!Node, !InertNode>}\n         */\n        this._managedNodes = new Map();\n\n        /**\n         * All inert roots known to this InertManager. In a map to allow looking up by Node.\n         * @type {!Map<!Node, !InertRoot>}\n         */\n        this._inertRoots = new Map();\n\n        /**\n         * Observer for mutations on `document.body`.\n         * @type {!MutationObserver}\n         */\n        this._observer = new MutationObserver(this._watchForInert.bind(this));\n\n        // Add inert style.\n        addInertStyle(document.head || document.body || document.documentElement);\n\n        // Wait for document to be loaded.\n        if (document.readyState === 'loading') {\n          document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));\n        } else {\n          this._onDocumentLoaded();\n        }\n      }\n\n      /**\n       * Set whether the given element should be an inert root or not.\n       * @param {!HTMLElement} root\n       * @param {boolean} inert\n       */\n\n\n      _createClass(InertManager, [{\n        key: 'setInert',\n        value: function setInert(root, inert) {\n          if (inert) {\n            if (this._inertRoots.has(root)) {\n              // element is already inert\n              return;\n            }\n\n            var inertRoot = new InertRoot(root, this);\n            root.setAttribute('inert', '');\n            this._inertRoots.set(root, inertRoot);\n            // If not contained in the document, it must be in a shadowRoot.\n            // Ensure inert styles are added there.\n            if (!this._document.body.contains(root)) {\n              var parent = root.parentNode;\n              while (parent) {\n                if (parent.nodeType === 11) {\n                  addInertStyle(parent);\n                }\n                parent = parent.parentNode;\n              }\n            }\n          } else {\n            if (!this._inertRoots.has(root)) {\n              // element is already non-inert\n              return;\n            }\n\n            var _inertRoot = this._inertRoots.get(root);\n            _inertRoot.destructor();\n            this._inertRoots['delete'](root);\n            root.removeAttribute('inert');\n          }\n        }\n\n        /**\n         * Get the InertRoot object corresponding to the given inert root element, if any.\n         * @param {!Node} element\n         * @return {!InertRoot|undefined}\n         */\n\n      }, {\n        key: 'getInertRoot',\n        value: function getInertRoot(element) {\n          return this._inertRoots.get(element);\n        }\n\n        /**\n         * Register the given InertRoot as managing the given node.\n         * In the case where the node has a previously existing inert root, this inert root will\n         * be added to its set of inert roots.\n         * @param {!Node} node\n         * @param {!InertRoot} inertRoot\n         * @return {!InertNode} inertNode\n         */\n\n      }, {\n        key: 'register',\n        value: function register(node, inertRoot) {\n          var inertNode = this._managedNodes.get(node);\n          if (inertNode !== undefined) {\n            // node was already in an inert subtree\n            inertNode.addInertRoot(inertRoot);\n          } else {\n            inertNode = new InertNode(node, inertRoot);\n          }\n\n          this._managedNodes.set(node, inertNode);\n\n          return inertNode;\n        }\n\n        /**\n         * De-register the given InertRoot as managing the given inert node.\n         * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert\n         * node from the InertManager's set of managed nodes if it is destroyed.\n         * If the node is not currently managed, this is essentially a no-op.\n         * @param {!Node} node\n         * @param {!InertRoot} inertRoot\n         * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.\n         */\n\n      }, {\n        key: 'deregister',\n        value: function deregister(node, inertRoot) {\n          var inertNode = this._managedNodes.get(node);\n          if (!inertNode) {\n            return null;\n          }\n\n          inertNode.removeInertRoot(inertRoot);\n          if (inertNode.destroyed) {\n            this._managedNodes['delete'](node);\n          }\n\n          return inertNode;\n        }\n\n        /**\n         * Callback used when document has finished loading.\n         */\n\n      }, {\n        key: '_onDocumentLoaded',\n        value: function _onDocumentLoaded() {\n          // Find all inert roots in document and make them actually inert.\n          var inertElements = slice.call(this._document.querySelectorAll('[inert]'));\n          inertElements.forEach(function (inertElement) {\n            this.setInert(inertElement, true);\n          }, this);\n\n          // Comment this out to use programmatic API only.\n          this._observer.observe(this._document.body || this._document.documentElement, { attributes: true, subtree: true, childList: true });\n        }\n\n        /**\n         * Callback used when mutation observer detects attribute changes.\n         * @param {!Array<!MutationRecord>} records\n         * @param {!MutationObserver} self\n         */\n\n      }, {\n        key: '_watchForInert',\n        value: function _watchForInert(records, self) {\n          var _this = this;\n          records.forEach(function (record) {\n            switch (record.type) {\n              case 'childList':\n                slice.call(record.addedNodes).forEach(function (node) {\n                  if (node.nodeType !== Node.ELEMENT_NODE) {\n                    return;\n                  }\n                  var inertElements = slice.call(node.querySelectorAll('[inert]'));\n                  if (matches.call(node, '[inert]')) {\n                    inertElements.unshift(node);\n                  }\n                  inertElements.forEach(function (inertElement) {\n                    this.setInert(inertElement, true);\n                  }, _this);\n                }, _this);\n                break;\n              case 'attributes':\n                if (record.attributeName !== 'inert') {\n                  return;\n                }\n                var target = /** @type {!HTMLElement} */record.target;\n                var inert = target.hasAttribute('inert');\n                _this.setInert(target, inert);\n                break;\n            }\n          }, this);\n        }\n      }]);\n\n      return InertManager;\n    }();\n\n    /**\n     * Recursively walk the composed tree from |node|.\n     * @param {!Node} node\n     * @param {(function (!HTMLElement))=} callback Callback to be called for each element traversed,\n     *     before descending into child nodes.\n     * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.\n     */\n\n\n    function composedTreeWalk(node, callback, shadowRootAncestor) {\n      if (node.nodeType == Node.ELEMENT_NODE) {\n        var element = /** @type {!HTMLElement} */node;\n        if (callback) {\n          callback(element);\n        }\n\n        // Descend into node:\n        // If it has a ShadowRoot, ignore all child elements - these will be picked\n        // up by the <content> or <shadow> elements. Descend straight into the\n        // ShadowRoot.\n        var shadowRoot = /** @type {!HTMLElement} */element.shadowRoot;\n        if (shadowRoot) {\n          composedTreeWalk(shadowRoot, callback, shadowRoot);\n          return;\n        }\n\n        // If it is a <content> element, descend into distributed elements - these\n        // are elements from outside the shadow root which are rendered inside the\n        // shadow DOM.\n        if (element.localName == 'content') {\n          var content = /** @type {!HTMLContentElement} */element;\n          // Verifies if ShadowDom v0 is supported.\n          var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];\n          for (var i = 0; i < distributedNodes.length; i++) {\n            composedTreeWalk(distributedNodes[i], callback, shadowRootAncestor);\n          }\n          return;\n        }\n\n        // If it is a <slot> element, descend into assigned nodes - these\n        // are elements from outside the shadow root which are rendered inside the\n        // shadow DOM.\n        if (element.localName == 'slot') {\n          var slot = /** @type {!HTMLSlotElement} */element;\n          // Verify if ShadowDom v1 is supported.\n          var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({ flatten: true }) : [];\n          for (var _i = 0; _i < _distributedNodes.length; _i++) {\n            composedTreeWalk(_distributedNodes[_i], callback, shadowRootAncestor);\n          }\n          return;\n        }\n      }\n\n      // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>\n      // element, nor a <shadow> element recurse normally.\n      var child = node.firstChild;\n      while (child != null) {\n        composedTreeWalk(child, callback, shadowRootAncestor);\n        child = child.nextSibling;\n      }\n    }\n\n    /**\n     * Adds a style element to the node containing the inert specific styles\n     * @param {!Node} node\n     */\n    function addInertStyle(node) {\n      if (node.querySelector('style#inert-style, link#inert-style')) {\n        return;\n      }\n      var style = document.createElement('style');\n      style.setAttribute('id', 'inert-style');\n      style.textContent = '\\n' + '[inert] {\\n' + '  pointer-events: none;\\n' + '  cursor: default;\\n' + '}\\n' + '\\n' + '[inert], [inert] * {\\n' + '  -webkit-user-select: none;\\n' + '  -moz-user-select: none;\\n' + '  -ms-user-select: none;\\n' + '  user-select: none;\\n' + '}\\n';\n      node.appendChild(style);\n    }\n\n    if (!HTMLElement.prototype.hasOwnProperty('inert')) {\n      /** @type {!InertManager} */\n      var inertManager = new InertManager(document);\n\n      Object.defineProperty(HTMLElement.prototype, 'inert', {\n        enumerable: true,\n        /** @this {!HTMLElement} */\n        get: function get() {\n          return this.hasAttribute('inert');\n        },\n        /** @this {!HTMLElement} */\n        set: function set(inert) {\n          inertManager.setInert(this, inert);\n        }\n      });\n    }\n  })();\n\n})));\n"],"names":["this"],"mappings":"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"}